{"version":3,"file":"static/js/234.2a4a7a16.chunk.js","mappings":"wNAGaA,EAAoCC,EAAAA,GACpCC,EAAkDC,EAAAA,E,iHCuD/D,UApDkB,WAChB,OAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWT,EAAAA,EAAAA,KACXU,GAAcC,EAAAA,EAAAA,QAA8B,MAC5CC,GAAYD,EAAAA,EAAAA,QAAsB,OAExCE,EAAAA,EAAAA,YAAU,WACJH,EAAYI,UACdF,EAAUE,QAAU,IAAIC,EAAAA,GAAO,CAC7BC,GAAIN,EAAYI,QAChBG,OAAQ,QACRC,aAAc,IACdC,aAAc,aAGpB,GAAG,IAEH,IAAMC,GAAgBC,EAAAA,EAAAA,cAAY,SAACC,GACjChB,EAASgB,EAAEC,OAAOC,MACpB,GAAG,IAEGC,GAAcJ,EAAAA,EAAAA,cAAY,WAC9B,GAAKT,EAAUE,QAAf,CAGA,IAAMY,EAAsB,CAC1BrB,MAAAA,EACAsB,SAAUf,EAAUE,QAAQc,WAE9BnB,GAASoB,EAAAA,EAAAA,GAAIH,IACbnB,EAAS,iCANT,CAOF,GAAG,CAACF,EAAOI,IAEX,OACE,4BACE,wBAAI,qCACJ,4BACE,2BAAO,kBACP,kBAAOqB,KAAK,OAAON,MAAOnB,EAAO0B,SAAUX,QAE7C,4BACE,2BAAO,kBACP,gBAAKY,IAAKtB,QAEZ,0BACE,mBAAQuB,QAASR,EAAY,SAAC,qBAItC,C","sources":["hooks/index.ts","pages/PostWrite.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../store\";\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import Editor from \"@toast-ui/editor\";\r\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\r\nimport { ChangeEvent, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { add, PostWithoutId } from \"../store/postsSlice\";\r\n\r\nconst PostWrite = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const editorElRef = useRef<HTMLDivElement | null>(null);\r\n  const editorRef = useRef<Editor | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (editorElRef.current) {\r\n      editorRef.current = new Editor({\r\n        el: editorElRef.current,\r\n        height: \"500px\",\r\n        initialValue: \" \",\r\n        previewStyle: \"vertical\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onChangeTitle = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.target.value);\r\n  }, []);\r\n\r\n  const onClickSave = useCallback(() => {\r\n    if (!editorRef.current) {\r\n      return;\r\n    }\r\n    const post: PostWithoutId = {\r\n      title,\r\n      contents: editorRef.current.getHTML(),\r\n    };\r\n    dispatch(add(post));\r\n    navigate(\"/react-editor-sample-improved2\");\r\n  }, [title, dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>글 작성하기</h1>\r\n      <div>\r\n        <label>제목</label>\r\n        <input type=\"text\" value={title} onChange={onChangeTitle}></input>\r\n      </div>\r\n      <div>\r\n        <label>내용</label>\r\n        <div ref={editorElRef}></div>\r\n      </div>\r\n      <div>\r\n        <button onClick={onClickSave}>저장</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostWrite;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","useState","title","setTitle","navigate","useNavigate","dispatch","editorElRef","useRef","editorRef","useEffect","current","Editor","el","height","initialValue","previewStyle","onChangeTitle","useCallback","e","target","value","onClickSave","post","contents","getHTML","add","type","onChange","ref","onClick"],"sourceRoot":""}